---
import type { GetStaticPathsOptions, MarkdownInstance, Page } from 'astro';
import BlogPostCard from '../../components/BlogPostCard.astro';
import Section from '../../components/Section.astro';
import Layout from '../../layouts/Layout.astro';
import { PostFrontMatter, sortPostsByDate } from '../../utils/posts';

export async function getStaticPaths({ paginate }: GetStaticPathsOptions) {
  const allPosts = await Astro.glob<PostFrontMatter>('./*.md');
  const sortedPosts = sortPostsByDate(allPosts);
  
  return paginate(sortedPosts, { pageSize: 6 });
}
export interface Props {
  page: Page<MarkdownInstance<PostFrontMatter>>;
}
const { page } = Astro.props as Props;

const title = "Posts page " + page.currentPage;
const description = "Here you can read all about what's on my mind or what I'm currently working on";
---

<Layout head={{ title, description }}>
  
	<Section>
		<div class="titleContainer">
			<h1 class="title">Marijn Kneppers' blog</h1>
			<div class="description">
				Here you can read all about what's on my mind or what I'm currently working on
			</div>
		</div>
	</Section>

	<Section>
		<div class="cards">
			{page.data.map((post) => (
				<BlogPostCard post={post} />
			))}
		</div>
	</Section>
	<Section>
		<div class="postNavContainer">
			<div class="postNav olderPosts">
				{page.url.prev &&
					<a href={page.url.prev}>	
						← Older posts
					</a>
				}
			</div>
			<div class="postNavIndexes">
			{
				[...Array(page.lastPage)].map((_, index) => (
					<a href={`/posts/${(index != 0)? index + 1 : ""}`}>{index + 1}</a>
				))
			}
			</div>
			<div class="postNav newerPosts">
				{page.url.next &&
					<a href={page.url.next}>	
						Newer posts →
					</a>
				}
			</div>
		</div>
	</Section>

</Layout>

<style define:vars={{rows: Math.ceil(page.data.length / 3)}}>
	.titleContainer {
		text-align: center;
	}
	.title {
		font-weight: 700;
		font-size: 2.25rem;
		line-height: 2.5rem;
	}
	.description {
		margin-top: 0.75rem;
		color: var(--color-gray-200);
	}
	.cards {
		display: grid;
		grid-template-columns: repeat(1, minmax(0, 1fr));
		grid-template-rows: repeat(var(--rows), minmax(0, 1fr));
		gap: 1.5rem;
	}

	@media (min-width: 768px) {
		.cards {
			grid-template-columns: repeat(3, minmax(0, 1fr));
		}
	}

	.postNavContainer {
		display: flex;
		justify-content: space-between;
	}
	.postNav {
		width: 128px;
	}
	.olderPosts:hover {
		transform: translate(-4px);
	}
	.postNavIndexes {
		display: flex;
		justify-content: space-around;
		width: 384px;
	}
	.newerPosts:hover {
		transform: translate(4px);
	}
</style>