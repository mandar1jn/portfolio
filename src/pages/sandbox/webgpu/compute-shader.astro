---
import Section from "@components/Section.astro";
import Layout from "@layouts/Layout.astro";

---
<Layout head={{title: "WebGPU compute shader", description: "A compute shader written using WebGPU"}}>
	<Section>
		<p>
			See console output for compute shader results.
		</p>
	</Section>
</Layout>

<script>
	import { InitializeWebGPU } from "@scripts/sandbox/webgpu";

	const {gpu, adapter, device} = await InitializeWebGPU();

	const BUFFER_SIZE = 1000;

	const outputBuffer = device.createBuffer({
		size: BUFFER_SIZE,
		usage: GPUBufferUsage.STORAGE | GPUBufferUsage.COPY_SRC
	});

	const stagingBuffer = device.createBuffer({
		size: BUFFER_SIZE,
		usage: GPUBufferUsage.MAP_READ | GPUBufferUsage.COPY_DST
	});

	const bindGroupLayout = device.createBindGroupLayout({
		entries: [
			{
				binding: 0,
				visibility: GPUShaderStage.COMPUTE,
				buffer: {
					type: "storage"
				}
			}
		]
	});

	const bindGroup = device.createBindGroup({
		layout: bindGroupLayout,
		entries: [
			{
				binding: 0,
				resource: {
					buffer: outputBuffer
				}
			}
		]
	});

	import shader from "@assets/sandbox/webgpu/compute-shader/shader.wgsl?raw";

	const shaderModule = device.createShaderModule({
		code: shader
	});

	const computePipeline = await device.createComputePipelineAsync({
		layout: device.createPipelineLayout({
			bindGroupLayouts: [bindGroupLayout]
		}),
		compute: {
			module: shaderModule,
			entryPoint: "main"
		}
	});

	const commandEncoder = device.createCommandEncoder();

	const computePassEncoder = commandEncoder.beginComputePass();

	computePassEncoder.setPipeline(computePipeline);
	computePassEncoder.setBindGroup(0, bindGroup);
	computePassEncoder.dispatchWorkgroups(Math.ceil(BUFFER_SIZE/64));

	computePassEncoder.end();

	commandEncoder.copyBufferToBuffer(outputBuffer, 0, stagingBuffer, 0, BUFFER_SIZE);

	device.queue.submit([commandEncoder.finish()]);

	await stagingBuffer.mapAsync(GPUMapMode.READ, 0, BUFFER_SIZE);
	const copyArrayBuffer = stagingBuffer.getMappedRange(0, BUFFER_SIZE);
	console.log(new Float32Array(copyArrayBuffer));
	stagingBuffer.unmap();
</script>