---
import figures from "../../assets/skylanders/figures.json";
import Layout from "../../layouts/Layout.astro";
import Section from "../../components/Section.astro";
---
<Layout head={{ title: "Skylanders figure generator", description: "This page can be used to generate valid dump files for skylanders figures to be used with emulators or nfc cards" }}>

	<Section>
		<h1>Skylanders figure generator</h1>
		<p>
			This website is custom written by me and <b>not</b> associated with Activision or Toys for Bob.
		</p>
		<p>
			Note: figures have not been validated and might not work.
		</p>
	</Section>
	<Section>
		<form id="form" name="skylander">
			<label for="figure">Figure: </label>
			<select class="black-text" name="figure" id="figure">
				{
					figures.map((figure, index) =>
					{
						if(typeof (figure.Variant) !== "string")
						{
							return (
								<option value={`${index}`}>{figure.Name}</option>
							);
						}
					})
				}
			</select>
			<select class="black-text" name="save-type" id="save-type">
				<option value="true">Encrypted</option>
				<option value="false">Unencrypted</option>
			</select>

			<input type="number" class="black-text" max="6500" min="0" value="0" name="money">
			<input type="submit" value="Generate" />
		</form>
	</Section>

</Layout>

<style>
	select {
		color: black;
	}

	form {
		display: grid;
		grid-column: 1;
	}
</style>

<script>
	import figures from "../../assets/skylanders/figures.json"
	import {Md5} from 'ts-md5';
	import aesjs from "aes-js";
	import {getKeyA, crc16} from "@scripts/skylanders/skylanders";

	const form = document.forms.namedItem("skylander")!;
	const selector = form["figure"] as HTMLSelectElement;
	const saveType = form["save-type"] as HTMLSelectElement;
	const money = form["money"] as HTMLInputElement;
	
	form.addEventListener("submit", (event) => 
	{
		event.preventDefault();
		generate();
	})

	async function generate() {

		const index: number = parseInt(selector.value);
		const figure = figures[index];

		const data = new Uint8Array(1024);

		const uuidArray = crypto.randomUUID().match(/.{2}/g)!;
		data[0] = parseInt(uuidArray[0], 16);
		data[1] = parseInt(uuidArray[1], 16);
		data[2] = parseInt(uuidArray[2], 16);
		data[3] = parseInt(uuidArray[3], 16);

		data[4] = data[0] ^ data[1] ^ data[2] ^ data[3];

		console.log("keys:")
		for(let i = 0; i < 16; i++)
		{
			let nuid = uuidArray[0] + uuidArray[1] + uuidArray[2] + uuidArray[3];
			const uidBytes = nuid.match(/.{2}/g)!.map(byte => parseInt(byte, 16));

			const key = getKeyA(i, uidBytes);

			console.log(key)
			
			const keyBytes = key.match(/.{1,2}/g)!;
			for(let j = 0; j < keyBytes.length; j++)
			{
				let offset = (i * 64) + (3 * 16) + j;

				data[offset] = parseInt(keyBytes[j], 16);
			}
		}

		const idString = figure.Id.toString(16).padStart(4, "0");
		const idStringArray = idString.match(/.{2}/g)!;
		data[16] = parseInt(idStringArray[1], 16);
		data[17] = parseInt(idStringArray[0], 16);

		const variantString = figure.Variant.toString(16).padStart(4, "0");
		const variantStringArray = variantString.match(/.{2}/g)!;
		data[28] = parseInt(variantStringArray[1], 16);
		data[29] = parseInt(variantStringArray[0], 16);

		var crc = crc16(data, 0, 30);
		const crcString = crc.toString(16);
		const crcStringArray = crcString.match(/.{2}/g)!;

		data[30] = parseInt(crcStringArray[1], 16);
		data[31] = parseInt(crcStringArray[0], 16);

		data[54] = 0x0f;
		data[55] = 0x0f;
		data[56] = 0x0f;
		data[57] = 0x69;

		for (let i = 1; i < 64; i++) {
			const offset = 64 * i + 48 + 5;
			data[offset + 1] = 0x7f;
			data[offset + 2] = 0x0f;
			data[offset + 3] = 0x08;
			data[offset + 4] = 0x69;
		}

		data[0x83] = (parseInt(money.value) & 0xFF);;
		data[0x84] = (parseInt(money.value) >> 8);

		data[0x89] = 0x1;
		data[0x112] = 0x1;

		// checksums
		// type 3
		// area 0

		let input = new Uint8Array(0x110);

		input.set(data.subarray(0xD0, 0xF0), 0);
		input.set(data.subarray(0x100, 0x110), 0x20);

		let type3Area0 = crc16(input, 0, 0x110);

		data[0x8A] = (type3Area0 & 0xFF);
		data[0x8B] = (type3Area0 >> 8);

		// type 2
		// area 0
		input = new Uint8Array(0x30);
		input.set(data.subarray(0x90, 0xB0), 0);
		input.set(data.subarray(0xC0, 0xD0), 0x20);

		let type2Area0 = crc16(input, 0, 0x30)

		data[0x8C] = (type2Area0 & 0xFF);
		data[0x8D] = (type2Area0 >> 8);

		// type 1
		// area 0

		input = new Uint8Array(0x10);
		input.set(data.subarray(0x80, 0x8E), 0);
		input[0xE] = 0x05;
		input[0xF] = 0x00;

		let type1Area0 = crc16(input, 0, 0x10)

		data[0x8E] = (type1Area0 & 0xFF);
		data[0x8F] = (type1Area0 >> 8);

		// type 6
		// area 0
		input = new Uint8Array(0x40);
		input.set(data.subarray(0x110, 0x130), 0);
		input.set(data.subarray(0x140, 0x160), 0x20);

		input[0] = 0x6;
		input[1] = 0x1

		let type6Area0 = crc16(input, 0, 0x40)

		data[0x110] = (type6Area0 & 0xFF);
		data[0x111] = (type6Area0 >> 8);

		// type 3
		// area 1

		input = new Uint8Array(0x110);

		input.set(data.subarray(0x290, 0x2B0), 0);
		input.set(data.subarray(0x2C0, 0x2D0), 0x20);

		let type3Area1 = crc16(input, 0, 0x110);

		data[0x24A] = (type3Area1 & 0xFF);
		data[0x24B] = (type3Area1 >> 8);

		// type 2
		// area 1
		input = new Uint8Array(0x30);
		input.set(data.subarray(0x250, 0x270), 0);
		input.set(data.subarray(0x280, 0x290), 0x20);

		let type2Area1 = crc16(input, 0, 0x30)

		data[0x24C] = (type2Area1 & 0xFF);
		data[0x24D] = (type2Area1 >> 8);

		// type 1
		// area 1

		input = new Uint8Array(0x10);
		input.set(data.subarray(0x240, 0x24E), 0);
		input[0xE] = 0x05;
		input[0xF] = 0x00;
		console.log(input)

		let type1Area1 = crc16(input, 0, 0x10)

		data[0x24E] = (type1Area1 & 0xFF);
		data[0x24F] = (type1Area1 >> 8);

		// type 6
		// area 1
		input = new Uint8Array(0x40);
		input.set(data.subarray(0x2D0, 0x2F0), 0);
		input.set(data.subarray(0x300, 0x320), 0x20);

		input[0] = 0x6;
		input[1] = 0x1;

		let type6Area1 = crc16(input, 0, 0x40)

		data[0x2D0] = (type6Area1 & 0xFF);
		data[0x2D1] = (type6Area1 >> 8);
		
		if(saveType.value == "true")
		{
			// encrypt
			for(let i = 0; i < 64; i++)
			{
				if(((i + 1) % 4 == 0) || i < 8)
				{
					// not encrypted
					continue;
				}

				let hashIn = new Uint8Array(0x56);
				for(let j = 0; j < 0x20; j++)
				{
					hashIn[j] = data[j];
				}
				hashIn[0x20] = i;
				const HASH_CONST = new Uint8Array([
					0x20, 0x43, 0x6F, 0x70, 0x79, 0x72, 0x69, 0x67, 0x68, 0x74, 0x20, 0x28, 0x43, 0x29, 0x20, 0x32,
					0x30, 0x31, 0x30, 0x20, 0x41, 0x63, 0x74, 0x69, 0x76, 0x69, 0x73, 0x69, 0x6F, 0x6E, 0x2E, 0x20,
					0x41, 0x6C, 0x6C, 0x20, 0x52, 0x69, 0x67, 0x68, 0x74, 0x73, 0x20, 0x52, 0x65, 0x73, 0x65, 0x72,
					0x76, 0x65, 0x64, 0x2E, 0x20]);
				hashIn.set(HASH_CONST, 0x21)

				let md5 = new Md5();
				md5.start();
				md5.appendByteArray(hashIn);
				let hash = Uint8Array.from((md5.end() as string).match(/.{1,2}/g)!.map((byte: any) => parseInt(byte, 16)));

				console.log(hash)

				var aesEcb = new aesjs.ModeOfOperation.ecb(hash);
				console.log(aesEcb)

				let block = new Uint8Array(0x10);
				block.set(data.subarray(16 * i, (16 * (i + 1))), 0)
				if(i == 8)
				{
					console.log(block)
				}
				let encrypted = aesEcb.encrypt(block);

				data.set(encrypted, 16 * i);

			}
		}

		const blob = new Blob([data], { type: "application/octet-stream" });

		const url = window.URL.createObjectURL(blob);

		const a = document.createElement("a");
		a.href = url;
		a.download = `${selector.options[selector.selectedIndex].text}.bin`;
		document.body.appendChild(a);
		a.style.display = "none";
		a.click();
		a.remove();

		setTimeout(() => window.URL.revokeObjectURL(url), 1000);
	}
</script>

<style>
	.black-text
	{
		color: black
	}
</style>